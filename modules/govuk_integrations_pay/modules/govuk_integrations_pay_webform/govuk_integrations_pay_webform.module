<?php

/**
 * @file
 * Provides basic integration with the GOV.UK Pay system.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\webform\Entity\Webform;
use Drupal\govuk_integrations_pay\Controller\GovPayController;
use Drupal\Core\Routing\TrustedRedirectResponse;

/**
 * Implements hook_theme().
 */
function govuk_integrations_pay_webform_theme($existing, $type, $theme, $path) {
  return [
    'govuk_integrations_pay_webform__govuk_confirmation_page' => [
      'variables' => [
        'payment_id' => NULL,
        'payment_amount' => NULL,
        'payment_status' => NULL,
        'payment_message' => NULL,
        'confirmation_message' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function govuk_integrations_pay_webform_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (substr($form_id, 0, 18) === 'webform_submission') {
    $form['elements'] = $form['elements'] ?? array();
    foreach (Element::children($form['elements']) as $cid) {
      $element = $form['elements'][$cid];
      if ($element['#type'] === 'webform_govuk_integrations_pay') {
        foreach (array_keys($form['actions']) as $action) {
          if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
            $form['actions'][$action]['#submit'][] = '_govuk_integrations_pay_webform__submit_handler';
          }
        }
        $form['gov-pay-element'] = [
          '#type' => 'hidden',
          '#value' => $element["#webform_key"],
        ];
        break;
      }
    }
  }
}

/**
 * Custom submit handler for GOV.UK Pay enabled webforms.
 *
 * @param array $form
 *   Form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Form State.
 */
function _govuk_integrations_pay_webform__submit_handler(array $form, FormStateInterface $form_state) {
  // Load config for GOV.UK Pay.
  $config = \Drupal::config('govuk_integrations_pay.settings');

  // Get Form state variables.
  $values = $form_state->getValues();
  $inputs = $form_state->getUserInput();
  $build = $form_state->getBuildInfo();

  // Fetch Submission ID from submission.
  $submissionForm = $build['callback_object'];
  $submission = $submissionForm->getEntity();
  $sid = $submission->id();

  // Find GOV.UK Pay element.
  $webform = Webform::load($form["#webform_id"]);
  $govPayElement = $webform->getElement($values['gov-pay-element']);

  // Determine GOV.UK Pay amount from the element amount provider.
  $amount = NULL;
  switch ($govPayElement['#amount_provider']) {
    case 'element':
      if (isset($values[$govPayElement['#amount_element']])) {
        $amount = floatval($values[$govPayElement['#amount_element']]);
      }
      elseif (isset($inputs[$govPayElement['#amount_element']])) {
        $amount = floatval($inputs[$govPayElement['#amount_element']]);
      }
      else {
        $amount = 0;
      }
      break;

    case 'static':
      $amount = $govPayElement['#amount_static'] ? floatval($govPayElement['#amount_static']) : 0;
      break;
  }


  $token_svc = \Drupal::token();
  $token_vars = ['webform_submission' => $submission];

  $address_token_base = "[webform_submission:values:" . $govPayElement['#address_element'];

  $cardholder_details = [
    "cardholder_name" =>  $token_svc->replacePlain("[webform_submission:values:" . $govPayElement['#cardholdername_element'] . ":value]", $token_vars),
    "billing_address" => [
      "line1" =>  $token_svc->replacePlain($address_token_base . ':address:value]', $token_vars),
      "line2" =>  $token_svc->replacePlain($address_token_base . ':address_2:value]', $token_vars),
      "postcode" =>  $token_svc->replacePlain($address_token_base . ':postal_code:value]', $token_vars),
      "city" =>  $token_svc->replacePlain($address_token_base . ':city:value]', $token_vars),
      "country" =>  $token_svc->replacePlain($address_token_base . ':country:value]', $token_vars),
    ]
  ];

  // Fetch payment message from element.
  $message = $govPayElement['#payment_message'] ?: $webform->label();

  // Reduce message length (GOV.UK Pay accepts 255 characters max).
  if (strlen($message) > 254) {
    $message = substr($message, 0, 250) . ' etc';
  }

  // Generate UUID.
  $uuidService = \Drupal::service('uuid');
  $uuid = $uuidService->generate();

  // Setup GOV.UK Pay Object.
  $gov = new GovPayController();
  $params = [
    'amount' => ($amount * 100),
    'message' => $message,
    "email" =>  $token_svc->replacePlain("[webform_submission:values:" . $govPayElement['#email_element'] . ":value]", $token_vars),
    'uuid' => $uuid,
    'webform_id' => $webform->id(),
    'submission_id' => $sid,
    'reference' => $config->get('gov_pay__reference'),
    'prefilled_cardholder_details' => $cardholder_details,
  ];

  // Allow alterations to the information before sending.
  \Drupal::moduleHandler()->alter('govuk_integrations_pay_submit', $params);

  // Make payment.
  $payment = $gov->makePayment($params);

  // Setup redirect to GOV.UK Pay.
  $nextUrl = isset($payment->_links->next_url->href) ? $payment->_links->next_url->href : NULL;
  if (!is_null($nextUrl)) {
    $form_state->setResponse(new TrustedRedirectResponse($nextUrl, 302));
  }
}
